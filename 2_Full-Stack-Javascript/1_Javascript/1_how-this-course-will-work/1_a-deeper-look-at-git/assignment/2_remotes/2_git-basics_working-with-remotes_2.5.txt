# ---------- 2.5 Git Basics - Working with Remotes ---------- 
# https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

#---- Showing Your Remotes ----

To see which remotes you have configured:

$ git remote => origin - * default Git gives server cloned from

$ git remote -v => 
    origin  https://github.com/schacon/ticgit (fetch)
    origin  https://github.com/schacon/ticgit (push)

The -v flag shows the URLs stored for the shortname used when
reading/writing to that remote. This command will return more
if there are more remotes.


#---- Adding Remote Repositories ----

To explicitly add a new remote Git repo as a shortname you can 
reference easily: git remote add <shortname> <url>

$ git remote add pb https://github.com/paulboone/ticgit

list config'd remotes:

$ git remote -v =>
    origin  https://github.com/schacon/ticgit (fetch)
    origin  https://github.com/schacon/ticgit (push)
    pb      https://github.com/paulboone/ticgit (fetch)
    pb      https://github.com/paulboone/ticgit (push)

This shorthand can now be used to fetch data w/out using URL:
git fetch <remote>

$ git fetch pb =>
    remote: Enumerating objects: 43, done.
    remote: Counting objects: 100% (22/22), done.
    remote: Total 43 (delta 22), reused 22 (delta 22), pack-reused 21
    Unpacking objects: 100% (43/43), done.
    From https://github.com/paulboone/ticgit
    * [new branch]      master     -> pb/master
    * [new branch]      ticgit     -> pb/ticgit


#---- Fetching and Pulling from Your Remotes ----

$ git fetch

Pulls down all data from remote project that you don't have 
which provides references to all branches from that remote
which can be merged or inspected at anytime.

git fetch doesn't automatically merge the data it downloads
or alter what you are currently working on. To do this you
should use:

$ git pull => fetch data from "clone source" and automatically merge 


#---- Pushing to Your Remotes ----

Syntax for pushing commits upstream - git push <remote> <branch>
To push your master branch to origin server:

$ git push origin master

This works only if upstream master has not incorporated conflicting
commits since you cloned or last ran git pull, in which case you will
have to run $ git pull first.


#---- Inspecting a Remote ----

To display info about a particular remote - git remote show <remote>:

$ git remote show origin ||
$ git remote show pb (in this case)


#---- Renaming and Removing Remotese ----

Rename pb to Paul:

$ git remote rename pb paul

And to remove this remote for any reason:

$ git remote remove paul ||
$ git remote rm paul

Inserting bullshit changes